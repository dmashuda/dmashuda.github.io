<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Daniel Mashuda</title>
    <link>http://danmashuda.com/tags/golang/</link>
    <description>Recent content in Golang on Daniel Mashuda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 16 Jun 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://danmashuda.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docstore</title>
      <link>http://danmashuda.com/project/docstore/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://danmashuda.com/project/docstore/</guid>
      <description>

&lt;p&gt;Document(file) Storage abstraction for golang&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Single Basic Interface for storing and retrieving documents&lt;/li&gt;
&lt;li&gt;Store and retrieve documents based on keys&lt;/li&gt;
&lt;li&gt;Implementations

&lt;ol&gt;
&lt;li&gt;Amazon S3&lt;/li&gt;
&lt;li&gt;File system&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Installing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; go get github.com/dmashuda/docstore
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;configuring-credentials-for-aws&#34;&gt;Configuring Credentials For AWS&lt;/h2&gt;

&lt;p&gt;Before using the SDK, ensure that you&amp;rsquo;ve configured credentials. The best
way to configure credentials on a development machine is to use the
&lt;code&gt;~/.aws/credentials&lt;/code&gt; file, which might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[default]
aws_access_key_id = AKID1234567890
aws_secret_access_key = MY-SECRET-KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can learn more about the credentials file from this
&lt;a href=&#34;http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs&#34;&gt;blog post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, you can set the following environment variables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY_ID=AKID1234567890
AWS_SECRET_ACCESS_KEY=MY-SECRET-KEY
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;h3 id=&#34;storage-creation&#34;&gt;Storage Creation&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Creates new Storer backed by an S3 Bucket
var storage docstore.Storer = docstore.BasicAws(&amp;quot;us-east-1&amp;quot;, &amp;quot;dmashuda-dev&amp;quot;)

// Creates new Storer backed by a file system
var storage docstore.Storer = docstore.NewFileStore(&amp;quot;/Volumes/storage&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;storing-a-document&#34;&gt;Storing a document&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Prepares putObj with ioreader and Identifier
file, _ := os.Open(fileName)
putObj := docstore.CreateObj{
  Identifier: fileName,
  Body:       file,
}
//store the photo
//errors ignored
id, err := storage.Put(putObj)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;retrieving-a-document&#34;&gt;Retrieving a document&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;getObj, _ := storage.Get(fileName)

newFile := os.Create(&amp;quot;newFile.jpg&amp;quot;)
defer newFile.Close()
numBytes, err := io.Copy(newFile, getObj.Body)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dmashuda/docstore/graphs/contributors&#34;&gt;https://github.com/dmashuda/docstore/graphs/contributors&lt;/a&gt;
 - Pull requests welcome
 - Feel free to add new docstore.Storer Implementations&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/jinzhu/gorm/blob/master/License&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go-Imgur</title>
      <link>http://danmashuda.com/project/go-imgur/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://danmashuda.com/project/go-imgur/</guid>
      <description>

&lt;p&gt;A basic api client for &lt;a href=&#34;https://api.imgur.com/&#34;&gt;imgur&lt;/a&gt;. Currently I have only implemented the features of the imgur api that I use for other projects.&lt;/p&gt;

&lt;p&gt;If you would like another piece of functionality implemented, open an &lt;a href=&#34;https://github.com/dmashuda/go-imgur/issues/new&#34;&gt;issue&lt;/a&gt; or implement it yourself and submit a pull request&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    go get github.com/dmashuda/go-imgur     
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-usage&#34;&gt;Example Usage:&lt;/h2&gt;

&lt;h4 id=&#34;creating-a-client&#34;&gt;Creating a Client:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    client := imgur.NewClient(clientID)   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;clientID is issued by imgur on a per application basis&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;retrieving-album-information&#34;&gt;Retrieving album information:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    aww, err := client.GetAlbum(&amp;quot;/gallery/r/CorgiGifs&amp;quot;, 0, 20)    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>