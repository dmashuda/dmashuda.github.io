<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on Daniel Mashuda</title>
    <link>http://danmashuda.com/tags/go/index.xml</link>
    <description>Recent content in Go on Daniel Mashuda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Daniel Mashuda</copyright>
    <atom:link href="http://danmashuda.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docstore</title>
      <link>http://danmashuda.com/project/docstore/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://danmashuda.com/project/docstore/</guid>
      <description>

&lt;p&gt;Document(file) Storage abstraction for golang&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Single Basic Interface for storing and retrieving documents&lt;/li&gt;
&lt;li&gt;Store and retrieve documents based on keys&lt;/li&gt;
&lt;li&gt;Implementations

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docstore/s3storage&#34;&gt;Amazon S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;File system&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Installing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; go get github.com/docstore/storage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;h3 id=&#34;storage-creation&#34;&gt;Storage Creation&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Creates new Storer backed by a file system
var storage docstore.Storer = docstore.NewFileStore(&amp;quot;/Volumes/storage&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;storing-a-document&#34;&gt;Storing a document&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Prepares putObj with ioreader and Identifier
file, _ := os.Open(fileName)
putObj := docstore.CreateObj{
  Identifier: fileName,
  ReadSeeker: file,
}
//store the photo
//errors ignored
id, err := storage.Put(putObj)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;retrieving-a-document&#34;&gt;Retrieving a document&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;getObj, _ := storage.Get(fileName)

newFile := os.Create(&amp;quot;newFile.jpg&amp;quot;)
defer newFile.Close()
defer getObj.Close()
numBytes, err := io.Copy(newFile, getObj)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docstore/storage/graphs/contributors&#34;&gt;https://github.com/docstore/storage/graphs/contributors&lt;/a&gt;
 - Pull requests welcome
 - Feel free to add new docstore.Storer Implementations&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Released under the MIT License&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go-Imgur</title>
      <link>http://danmashuda.com/project/go-imgur/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://danmashuda.com/project/go-imgur/</guid>
      <description>

&lt;p&gt;A basic api client for &lt;a href=&#34;https://api.imgur.com/&#34;&gt;imgur&lt;/a&gt;. Currently I have only implemented the features of the imgur api that I use for other projects.&lt;/p&gt;

&lt;p&gt;If you would like another piece of functionality implemented, open an &lt;a href=&#34;https://github.com/dmashuda/go-imgur/issues/new&#34;&gt;issue&lt;/a&gt; or implement it yourself and submit a pull request&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;    go get github.com/dmashuda/go-imgur     
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-usage&#34;&gt;Example Usage:&lt;/h2&gt;

&lt;h4 id=&#34;creating-a-client&#34;&gt;Creating a Client:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    client := imgur.NewClient(clientID)   
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;clientID is issued by imgur on a per application basis&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;retrieving-album-information&#34;&gt;Retrieving album information:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;    aww, err := client.GetAlbum(&amp;quot;/gallery/r/CorgiGifs&amp;quot;, 0, 20)    
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Game Server</title>
      <link>http://danmashuda.com/project/game-server/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://danmashuda.com/project/game-server/</guid>
      <description>

&lt;p&gt;Car combat was designed and built for CS481(Senior Software Project). Car combat
is a real-time multiplayer game. Car combat uses an architecture with
an authoritative server. Each client connects to the server and communicates over
a UDP socket. Each client streams commands to the server, and the server broadcasts
the current State of the Game to all of the connected clients. The commands and
GameState are described below:
&lt;img src=&#34;https://raw.githubusercontent.com/awesomegroupidunno/senior-design/master/shared.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The game server runs its udp receiver on 2 goroutines, one for sending GameStates
 and one for receiving game commands. The main game loop in the GameManager
 is run on its own goroutine. Each Game command has a corresponding Command
 Processor which mutates the GameState for its corresponding command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/awesomegroupidunno/senior-design/master/server.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;project-information&#34;&gt;Project Information&lt;/h3&gt;

&lt;h6 id=&#34;project-contributers&#34;&gt;Project Contributers:&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://danmashuda.com/about&#34;&gt;Daniel Mashuda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Austin Decker&lt;/li&gt;
&lt;li&gt;Austin Forry&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;install-dependencies&#34;&gt;Install dependencies:&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;    go get .    
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;run-unit-tests&#34;&gt;Run Unit Tests:&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;    go test -v ./...  
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;run-server&#34;&gt;Run Server:&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;    go run server.go  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, the server listens on port: 10001, this can be configured in the server.go file
Car combat client implementation is located:  &lt;a href=&#34;https://github.com/awesomegroupidunno/game-client&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>