<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Io on Daniel Mashuda</title>
    <link>http://danmashuda.com/tags/io/</link>
    <description>Recent content in Io on Daniel Mashuda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2016 Daniel Mashuda</copyright>
    <lastBuildDate>Thu, 16 Jun 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://danmashuda.com/tags/io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docstore</title>
      <link>http://danmashuda.com/project/docstore/</link>
      <pubDate>Thu, 16 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>http://danmashuda.com/project/docstore/</guid>
      <description>

&lt;p&gt;Document(file) Storage abstraction for golang&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Single Basic Interface for storing and retrieving documents&lt;/li&gt;
&lt;li&gt;Store and retrieve documents based on keys&lt;/li&gt;
&lt;li&gt;Implementations

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/docstore/s3storage&#34;&gt;Amazon S3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;File system&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Installing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; go get github.com/docstore/storage
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;h3 id=&#34;storage-creation&#34;&gt;Storage Creation&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Creates new Storer backed by a file system
var storage docstore.Storer = docstore.NewFileStore(&amp;quot;/Volumes/storage&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;storing-a-document&#34;&gt;Storing a document&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;// Prepares putObj with ioreader and Identifier
file, _ := os.Open(fileName)
putObj := docstore.CreateObj{
  Identifier: fileName,
  ReadSeeker: file,
}
//store the photo
//errors ignored
id, err := storage.Put(putObj)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;retrieving-a-document&#34;&gt;Retrieving a document&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;getObj, _ := storage.Get(fileName)

newFile := os.Create(&amp;quot;newFile.jpg&amp;quot;)
defer newFile.Close()
defer getObj.Close()
numBytes, err := io.Copy(newFile, getObj)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;contributing&#34;&gt;Contributing&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/docstore/storage/graphs/contributors&#34;&gt;https://github.com/docstore/storage/graphs/contributors&lt;/a&gt;
 - Pull requests welcome
 - Feel free to add new docstore.Storer Implementations&lt;/p&gt;

&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;

&lt;p&gt;Released under the MIT License&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>