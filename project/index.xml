<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Daniel Mashuda</title>
    <link>dmashuda.github.io/project/</link>
    <description>Recent content in Projects on Daniel Mashuda</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Feb 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="dmashuda.github.io/project/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Lighthouse</title>
      <link>/dmashuda.github.io/project/lighthouse/</link>
      <pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/dmashuda.github.io/project/lighthouse/</guid>
      <description>

&lt;h1 id=&#34;currently-under-developement:bb0a7fe137e1b558c7c0c642a0c55d57&#34;&gt;Currently Under Developement&lt;/h1&gt;

&lt;p&gt;A microservice for logging errors and other application events.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go-Imgur</title>
      <link>/dmashuda.github.io/project/go-imgur/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/dmashuda.github.io/project/go-imgur/</guid>
      <description>

&lt;p&gt;A basic api client for &lt;a href=&#34;https://api.imgur.com/&#34;&gt;imgur&lt;/a&gt;. Currently I have only implemented the features of the imgur api that I use for other projects.&lt;/p&gt;

&lt;p&gt;If you would like another piece of functionality implemented, open an &lt;a href=&#34;https://github.com/dmashuda/go-imgur/issues/new&#34;&gt;issue&lt;/a&gt; or implement it yourself and submit a pull request&lt;/p&gt;

&lt;h2 id=&#34;installation:17169e550c700efc4413d99d79848bed&#34;&gt;Installation:&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/dmashuda/go-imgur
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;example-usage:17169e550c700efc4413d99d79848bed&#34;&gt;Example Usage:&lt;/h2&gt;

&lt;h4 id=&#34;creating-a-client:17169e550c700efc4413d99d79848bed&#34;&gt;Creating a Client:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;client := imgur.NewClient(clientID)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;clientID is issued by imgur on a per application basis&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&#34;retrieving-album-information:17169e550c700efc4413d99d79848bed&#34;&gt;Retrieving album information:&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;aww, err := client.GetAlbum(&amp;quot;/gallery/r/CorgiGifs&amp;quot;, 0, 20)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Photo Share</title>
      <link>/dmashuda.github.io/project/photoshare/</link>
      <pubDate>Sat, 16 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/dmashuda.github.io/project/photoshare/</guid>
      <description>

&lt;p&gt;PhotoShare is a generic photo sharing website that I built for sharing pictures with my friends and family so that I can be in control of our data and our pictures rather than relying on Google/Facebook/others.Fairly generic and basic, it supports uploading and tagging photo.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Open to feature requests
 - Just put in an issue and label it a feature request
 - If you want to implement the feature, then please mark work in progress&lt;/p&gt;

&lt;p&gt;Open to pull requests
 - If there is an issue open for the feature/improvement/bugfix please mark as a work in progress
 - if there is not an issue for feature/improvement/bugfix please create one and mark as a work in progress&lt;/p&gt;

&lt;h3 id=&#34;configuration:f0eb590cd88eec609acccb193a1e59ef&#34;&gt;Configuration&lt;/h3&gt;

&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;For Storing Photos in an S3 Bucket&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS_ACCESS_KEY_ID&lt;/li&gt;
&lt;li&gt;AWS_SECRET_ACCESS_KEY&lt;/li&gt;
&lt;li&gt;S3_BUCKET_NAME&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Mail Configuration with a gmail account&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GMAIL_DOMAIN&lt;/li&gt;
&lt;li&gt;GMAIL_PASSWORD&lt;/li&gt;
&lt;li&gt;GMAIL_USERNAME&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;General Rails Configuration&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;RACK_ENV&lt;/li&gt;
&lt;li&gt;SECRET_KEY_BASE&lt;/li&gt;
&lt;li&gt;DATABASE_URL&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Feel free to drop me a line: dmashuda@ycp.edu&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Game Server</title>
      <link>/dmashuda.github.io/project/game-server/</link>
      <pubDate>Fri, 01 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/dmashuda.github.io/project/game-server/</guid>
      <description>

&lt;p&gt;Car combat was designed and built for CS481(Senior Software Project). Car combat
is a real-time multiplayer game. Car combat uses an architecture with
an authoritative server. Each client connects to the server and communicates over
a UDP socket. Each client streams commands to the server, and the server broadcasts
the current State of the Game to all of the connected clients. The commands and
GameState are described below:
&lt;img src=&#34;https://raw.githubusercontent.com/awesomegroupidunno/senior-design/master/shared.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The game server runs its udp receiver on 2 goroutines, one for sending GameStates
 and one for receiving game commands. The main game loop in the GameManager
 is run on its own goroutine. Each Game command has a corresponding Command
 Processor which mutates the GameState for its corresponding command.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/awesomegroupidunno/senior-design/master/server.png&#34; alt=&#34;alt text&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;project-information:94142c10613ecc175a9363ff7eb2f45a&#34;&gt;Project Information&lt;/h3&gt;

&lt;h6 id=&#34;project-contributers:94142c10613ecc175a9363ff7eb2f45a&#34;&gt;Project Contributers:&lt;/h6&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://danmashuda.com/about&#34;&gt;Daniel Mashuda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Austin Decker&lt;/li&gt;
&lt;li&gt;Austin Forry&lt;/li&gt;
&lt;/ul&gt;

&lt;h6 id=&#34;install-dependencies:94142c10613ecc175a9363ff7eb2f45a&#34;&gt;Install dependencies:&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;go get .
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;run-unit-tests:94142c10613ecc175a9363ff7eb2f45a&#34;&gt;Run Unit Tests:&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;go test -v ./...
&lt;/code&gt;&lt;/pre&gt;

&lt;h6 id=&#34;run-server:94142c10613ecc175a9363ff7eb2f45a&#34;&gt;Run Server:&lt;/h6&gt;

&lt;pre&gt;&lt;code&gt;go run server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, the server listens on port: 10001, this can be configured in the server.go file
Car combat client implementation is located:  &lt;a href=&#34;https://github.com/awesomegroupidunno/game-client&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Network Scanner</title>
      <link>/dmashuda.github.io/project/networkscanner/</link>
      <pubDate>Thu, 02 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>/dmashuda.github.io/project/networkscanner/</guid>
      <description>&lt;p&gt;A network scanner for android. Uses the new UI components Cardview and Recyclview. Displays the IP, Host Name, and MAC address for all of the network devices on the network&lt;/p&gt;

&lt;p&gt;published on Google Play &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.unwind.networkmonitor&amp;amp;hl=en&#34;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Feel free to fork, improve, and use. In the spirit of open source, submit pull requests! I will do my best to communicate and merge them.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>